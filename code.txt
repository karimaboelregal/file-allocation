github link: https://github.com/kikosvg/file-allocation

file allocation.java

package file.allocation;
import java.util.*;

public class FileAllocation {
    static int IDS = 0;

    public static int getRandomNumber(int min, int max) {
        return (int) ((Math.random() * (max - min)) + min);
    }
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("Enter the block size");
        int size = input.nextInt();
        System.out.println("1- for contigous, 2- for indexed, 3- for linked");
        int algo = input.nextInt();
        boolean cont = false;
        String fileName;
        int start, length;
        char reply;
        if (algo == 1) {

            contiguos contAllocation = new contiguos(size);
            do {
                System.out.println("Enter the file name and length");
                fileName = input.next();
                length = input.nextInt();
                if (!contAllocation.enoughMemorySpace(length, size)) {
                    System.out.println("Not enough memory space");
                    contAllocation.output(size);
                    contAllocation.output2(size);
                    return;
                }
                start = getRandomNumber(0, (size - 1) - length);
                while (contAllocation.existInMemory(start) || !contAllocation.enoughContigiousMemory(start, length)) {
                    start = getRandomNumber(0, (size - 1) - length);

                }
                contAllocation.AllocateMemory(start, length, fileName);
                System.out.println("do you want to input another file(y/n)");
                reply = input.next().charAt(0);
                if (reply == 'y') {
                    cont = true;
                } else {
                    cont = false;
                }
            } while(cont == true);
            contAllocation.output(size);
            contAllocation.output2(size);
        } else if (algo == 2) {
            indexed indexMethod = new indexed(size);
            do {
                System.out.println("Enter the file name and length");
                fileName = input.next();
                length = input.nextInt();
                indexMethod.AllocateMemory(length, fileName);
                System.out.println("do you want to input another file(y/n)");
                reply = input.next().charAt(0);
                if (reply == 'y') {
                    cont = true;
                } else {
                    cont = false;
                }                
            } while(cont == true);
            indexMethod.output();
        } else if (algo == 3) {
             linked linkedMethod = new linked(size);
            do {
                System.out.println("Enter the file name and length");
                fileName = input.next();
                length = input.nextInt();
                linkedMethod.AllocateMemory(length, fileName);
                System.out.println("do you want to input another file(y/n)");
                reply = input.next().charAt(0);
                if (reply == 'y') {
                    cont = true;
                } else {
                    cont = false;
                }                
            } while(cont == true);
            linkedMethod.output();
           
        }
    }
}
contigous.java
package file.allocation;

import java.util.ArrayList;

public class contiguos {
    block[] blockMem;
    ArrayList<Integer> ints = new ArrayList<>();

    contiguos(int length) {
        blockMem = new block[length];
        for (int i = 0; i < length; i++) {
            blockMem[i] = new block();
        }
    }

    void output(int size) {
        String text = "";
        Integer id = 0;
        int s = 0;
        System.out.println("File Name\tStart\tend\tLength");
        for (int i = 0; i < size; i++) {
            if (blockMem[i].occupied && (blockMem[i].fileID != id)) {
                text = blockMem[i].fileName + "\t\t"+(i+1);
                id = blockMem[i].fileID;
                s = 0;
                for (int j = i; j < size; j++) {
                    if (blockMem[i].fileID == blockMem[j].fileID) {
                        s++;
                    } else {
                        text = text + "\t"+(i+s)+"\t"+s;
                        System.out.println(text);
                        text = "";
                        break;
                    }
                }
            }
        }
    }
    
    void output2(int size) {
        String text = "";
        Integer id = 0;
        String s = "";
        System.out.println("File Name\t\tBlocks");
        for (int i = 0; i < size; i++) {
            if (blockMem[i].occupied && (blockMem[i].fileID != id)) {
                text = blockMem[i].fileName + "\t\t\t";
                id = blockMem[i].fileID;
                s = "";
                for (int j = i; j < size; j++) {
                    if (blockMem[i].fileID == blockMem[j].fileID) {
                        s += (j+1)+" ,";
                    } else {
                        text = text + ""+s;
                        System.out.println(text);
                        text = "";
                        break;
                    }
                }
            }
        }
   }
    
    void AllocateMemory(int start, int length, String fileName) {
        FileAllocation.IDS = FileAllocation.IDS + 1 ;
        for (int i = start; i < start + length; i++) {
            blockMem[i].fileID = FileAllocation. IDS;
            blockMem[i].fileName = fileName;
            blockMem[i].occupied = true;
            ints.add(i);
        }
        System.out.println("Occupied starting from "+(start+1)+" to "+((start+length))+" and file name is "+fileName);     
    }
    
    public Boolean existInMemory(int start) {
        for (int i = 0; i < ints.size(); i++) {
            if (start == ints.get(i)) {
                return true;
            }
        }
        return false;
    }
    
    
    public Boolean enoughContigiousMemory(int start, int length) {
        for(int i = start; i < start +length; i++) {
            if (blockMem[i].occupied) {
                return false;
            }
        }
        return true;
    }
    
    public Boolean enoughMemorySpace(int length, int size) {
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (!blockMem[i].occupied) {
                count++;
                if (count == length) {
                    return true;
                }
            } else {
                count = 0;
            }
        }
        return false;
    }

}
indexed.java
package file.allocation;

import java.util.ArrayList;


public class indexed {
    block[] blockMem;
    int max;
    
    indexed(int length) {
        blockMem = new block[length];
        max = length;
        for (int i = 0; i < length; i++) {
            blockMem[i] = new block();
        }
    }
    
    int getIndexedRandomNumber(int length) {
        int rand = FileAllocation.getRandomNumber(0, length);
        while(blockMem[rand].occupied) {
            rand = FileAllocation.getRandomNumber(0, length);
        }
        return rand;
    }

    Boolean enoughBlocks(int length) {
        int current = 0;
        for (int i = 0; i < max; i++) {
            if (!blockMem[i].occupied) {
                current++;
                if (current >= (length+1)) {
                    return true;
                }
            }   
        }
       return false;
    }

    
    void output() {
        String text = "";
        System.out.println("File Name\tindex Block\tBlock");
        for (int i = 0; i < max; i++) {
            if (blockMem[i].root) {
                text += blockMem[i].fileName+"\t\t"+i+"\t\t";
                for (int j = 0; j < blockMem[i].indexes.size(); j++) {
                    text += blockMem[i].indexes.get(j) + ", ";
                }
                text+="\n";
            }
        }
        System.out.println(text);
    }
    
    void AllocateMemory(int length, String fileName) {
        if (!enoughBlocks(length)) {
            System.out.println("not enough space");
            return;
        }
        FileAllocation.IDS = FileAllocation.IDS + 1 ;
        int start = getIndexedRandomNumber(max);
        blockMem[start].fileID = FileAllocation.IDS;
        blockMem[start].fileName = fileName;
        blockMem[start].occupied = true;
        blockMem[start].root = true;
        int rand;
        String text = "";
        for (int i = 0; i < length; i++) {
            rand = getIndexedRandomNumber(max);
            blockMem[rand].fileID = FileAllocation.IDS;
            blockMem[rand].fileName = fileName;
            blockMem[rand].occupied = true;
            blockMem[rand].root = false;
            blockMem[start].indexes.add(rand);
            text += rand+", ";
        }
        System.out.println("Occupied "+text+" and file name is "+fileName);     
    }

}
linked.java
package file.allocation;

public class linked {
    block[] blockMem;
    int max;
    
    linked(int length) {
        blockMem = new block[length];
        max = length;
        for (int i = 0; i < length; i++) {
            blockMem[i] = new block();
            blockMem[i].root = false;
        }
    }
    int getRandomLinkedBlock(int length) {
        int rand = FileAllocation.getRandomNumber(0, length);
        while(blockMem[rand].occupied) {
            rand = FileAllocation.getRandomNumber(0, length);
        }
        return rand;
    }
    Boolean enoughBlocks(int length) {
        int current = 0;
        for (int i = 0; i < max; i++) {
            if (!blockMem[i].occupied) {
                current++;
                if (current >= length) {
                    return true;
                }
            }   
        }
       return false;
    }
    
    void output() {
        String text = "";
        block current;
        System.out.println("File Name\tblocks");
        for (int i = 0; i < max; i++) {
            if (blockMem[i].root) {
                current = blockMem[i];
                text += blockMem[i].fileName+"\t\t"+i+" > ";
                while (current.next != Integer.MIN_VALUE) {
                    text += current.next;
                    current = blockMem[current.next];
                    if (current.next != Integer.MIN_VALUE) {
                        text += " > ";
                    }
                }
                text += "\n";
            }
        }
        System.out.println(text);
    }

    
    void AllocateMemory(int length, String fileName) {
        if (!enoughBlocks(length)) {
            System.out.println("not enough space");
            return;
        }
        FileAllocation.IDS = FileAllocation.IDS + 1 ;
        int j = 0;
        int temp;
        int rand[] = new int[2];
        rand[j] = getRandomLinkedBlock(max);
        String text = "";
        for (int i = 0; i < length; i++) {
            
            if (i == 0) {
                blockMem[rand[j]].root = true;
            }
            blockMem[rand[j]].fileID = FileAllocation.IDS;
            blockMem[rand[j]].fileName = fileName;
            blockMem[rand[j]].occupied = true;
            text += rand[j]+", ";
            if (i != (length-1)) {
                temp = rand[j];
                if (j == 0) {
                    rand[1] = getRandomLinkedBlock(max);
                    j = 1;
                } else {
                    rand[0] = getRandomLinkedBlock(max);
                    j = 0;
                }
                blockMem[temp].next = rand[j];
            } 
        }
        System.out.println("Occupied "+text+" and file name is "+fileName);     
    }

}
block.java
package file.allocation;
import java.util.ArrayList;

public class block {
    String fileName;
    int fileID;
    boolean occupied = false;
    boolean root;
    int next = Integer.MIN_VALUE;
    ArrayList<Integer> indexes = new ArrayList<>();
}
